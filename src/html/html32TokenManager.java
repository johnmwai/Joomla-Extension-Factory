/* Generated By:JJTree&JavaCC: Do not edit this line. html32TokenManager.java */
package html;

/** Token Manager. */
public class html32TokenManager implements html32Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x200000L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_4(0x200000L);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, 0L, active1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(2);
                  break;
               case 0:
                  if ((0xffffdfffffffffffL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffdfffffffffffL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 84)
                     kind = 84;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x18L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 60:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 62 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if ((0xefffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 5:
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(5);
                  break;
               case 2:
                  jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(5);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 81;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_2(0x800L);
      case 61:
         return jjStopAtPos(0, 77);
      case 62:
         return jjStopAtPos(0, 76);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(1, 75, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, 0L, active1);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  else if ((0x600000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(2);
                  }
                  break;
               case 1:
                  if ((0x600000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xbfffff7affffd9ffL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(6);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 3:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 6:
                  if ((0xbfffff7affffd9ffL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 6:
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  jjAddStates(2, 3);
                  break;
               case 4:
                  jjAddStates(4, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 6:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(4, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 65:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_1(0x380L, 0x0L);
      case 66:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_1(0x1f800L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_1(0x1e0000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_1(0x7e00000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_1(0x8000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_1(0x30000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_1(0x7fc0000000L, 0x0L);
      case 73:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_1(0x70000000000L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_1(0x80000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_1(0x300000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_1(0x1c00000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_1(0x6000000000000L, 0x0L);
      case 80:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_1(0x70000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_1(0xff80000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x7fL);
      case 85:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100L);
      case 86:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200L);
      case 97:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_1(0x380L, 0x0L);
      case 98:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_1(0x1f800L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x1e0000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x7e00000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x8000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x30000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_1(0x7fc0000000L, 0x0L);
      case 105:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_1(0x70000000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_1(0x80000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x300000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x1c00000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x6000000000000L, 0x0L);
      case 112:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_1(0x70000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0xff80000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x7fL);
      case 117:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 50:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 51:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 52:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 53:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 54:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_1(active0, 0x90400000021800L, active1, 0x201L);
      case 66:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         return jjMoveStringLiteralDfa2_1(active0, 0x80L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_1(active0, 0x201801000040000L, active1, 0x4L);
      case 70:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000L, active1, 0L);
      case 72:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 73:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x200001882000L, active1, 0x10L);
      case 76:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         return jjMoveStringLiteralDfa2_1(active0, 0x4000L, active1, 0L);
      case 77:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         return jjMoveStringLiteralDfa2_1(active0, 0x400010000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_1(active0, 0x30108000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000100L, active1, 0L);
      case 82:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         return jjMoveStringLiteralDfa2_1(active0, 0x60000000000200L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         return jjMoveStringLiteralDfa2_1(active0, 0x3800004000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_1(active0, 0xc000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x90400000021800L, active1, 0x201L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         return jjMoveStringLiteralDfa2_1(active0, 0x80L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x201801000040000L, active1, 0x4L);
      case 102:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000L, active1, 0L);
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 105:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x200001882000L, active1, 0x10L);
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         return jjMoveStringLiteralDfa2_1(active0, 0x4000L, active1, 0L);
      case 109:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         return jjMoveStringLiteralDfa2_1(active0, 0x400010000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x30108000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000100L, active1, 0L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         return jjMoveStringLiteralDfa2_1(active0, 0x60000000000200L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         return jjMoveStringLiteralDfa2_1(active0, 0x3800004000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0xc000000000000000L, active1, 0L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_1(active0, 0x400001000000000L, active1, 0L);
      case 66:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 62);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x1L);
      case 68:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 43);
         return jjMoveStringLiteralDfa3_1(active0, 0x108080L, active1, 0L);
      case 69:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         return jjMoveStringLiteralDfa3_1(active0, 0x200L, active1, 0L);
      case 71:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(2, 13);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 40);
         break;
      case 73:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_1(active0, 0x80004000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(2, 22);
         return jjMoveStringLiteralDfa3_1(active0, 0xa00010040000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000004000L, active1, 0L);
      case 80:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 63);
         return jjMoveStringLiteralDfa3_1(active0, 0x20000020100L, active1, 0L);
      case 82:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(2, 23);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(2, 73);
         return jjMoveStringLiteralDfa3_1(active0, 0x1910000020000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_1(active0, 0x1800L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_1(active0, 0x5000000080000L, active1, 0x10L);
      case 86:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         break;
      case 88:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x4L);
      case 89:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x400001000000000L, active1, 0L);
      case 98:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 62);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x1L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 43);
         return jjMoveStringLiteralDfa3_1(active0, 0x108080L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         return jjMoveStringLiteralDfa3_1(active0, 0x200L, active1, 0L);
      case 103:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(2, 13);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x80004000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(2, 22);
         return jjMoveStringLiteralDfa3_1(active0, 0xa00010040000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000004000L, active1, 0L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 63);
         return jjMoveStringLiteralDfa3_1(active0, 0x20000020100L, active1, 0L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(2, 23);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(2, 73);
         return jjMoveStringLiteralDfa3_1(active0, 0x1910000020000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x1800L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x5000000080000L, active1, 0x10L);
      case 118:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x4L);
      case 121:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000000L, active1, 0L);
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(3, 9);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 48);
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000L, active1, 0L);
      case 68:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 69:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000001000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_1(active0, 0x904000000000000L, active1, 0L);
      case 75:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 45);
         break;
      case 76:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 38);
         return jjMoveStringLiteralDfa4_1(active0, 0x2400000000000100L, active1, 0x11L);
      case 77:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000000L, active1, 0L);
      case 80:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 55);
         break;
      case 82:
         return jjMoveStringLiteralDfa4_1(active0, 0x80L, active1, 0L);
      case 84:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         return jjMoveStringLiteralDfa4_1(active0, 0x60000L, active1, 0x4L);
      case 85:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 47);
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         break;
      case 97:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(3, 9);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 48);
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000L, active1, 0L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000001000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x904000000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 45);
         break;
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 38);
         return jjMoveStringLiteralDfa4_1(active0, 0x2400000000000100L, active1, 0x11L);
      case 109:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 55);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x80L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         return jjMoveStringLiteralDfa4_1(active0, 0x60000L, active1, 0x4L);
      case 117:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 47);
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         break;
      default :
         return 4;
   }
   return 4;
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x4L);
      case 67:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(4, 61);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(4, 64);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(4, 68);
         return jjMoveStringLiteralDfa5_1(active0, 0x40180L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000004000L, active1, 0L);
      case 76:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(4, 58);
         break;
      case 77:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(4, 52);
         break;
      case 78:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_1(active0, 0x140000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(4, 41);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x4L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(4, 61);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(4, 64);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(4, 68);
         return jjMoveStringLiteralDfa5_1(active0, 0x40180L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000004000L, active1, 0L);
      case 108:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(4, 58);
         break;
      case 109:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(4, 52);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0x140000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(4, 41);
         break;
      default :
         return 5;
   }
   return 5;
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 59);
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000L, active1, 0L);
      case 71:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(5, 60);
         break;
      case 78:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 50);
         break;
      case 79:
         return jjMoveStringLiteralDfa6_1(active0, 0x21000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000L, active1, 0L);
      case 82:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa6_1(active0, 0x80L, active1, 0L);
      case 84:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(5, 54);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 57);
         break;
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 59);
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(5, 60);
         break;
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 50);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0x21000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa6_1(active0, 0x80L, active1, 0L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(5, 54);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 57);
         break;
      default :
         return 6;
   }
   return 6;
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x4L);
      case 78:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         return jjMoveStringLiteralDfa7_1(active0, 0x1000L, active1, 0L);
      case 83:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(6, 7);
         break;
      case 85:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000L, active1, 0L);
      case 88:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x4L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         return jjMoveStringLiteralDfa7_1(active0, 0x1000L, active1, 0L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(6, 7);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000L, active1, 0L);
      case 120:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         break;
      default :
         return 7;
   }
   return 7;
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(7, 66);
         break;
      case 79:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000L, active1, 0L);
      case 84:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(7, 12);
         break;
      case 97:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(7, 66);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(7, 12);
         break;
      default :
         return 8;
   }
   return 8;
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa9_1(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa9_1(active0, 0x4000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         break;
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         break;
      default :
         return 10;
   }
   return 10;
}
static final int[] jjnextStates = {
   2, 3, 1, 2, 4, 5, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\74", "\74\57", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\76", "\75", null, null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "TAG",
   "ATTLIST",
   "ATTRVAL",
   "ATTCOMM",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 
   4, 0, 3, -1, -1, -1, -1, 2, -1, -1, 2, 
};
static final long[] jjtoToken = {
   0xfffffffffffffff9L, 0x633ffL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x380c00L, 
};
static final long[] jjtoSpecial = {
   0x6L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[7];
private final int[] jjstateSet = new int[14];
protected char curChar;
/** Constructor. */
public html32TokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public html32TokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 7; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
