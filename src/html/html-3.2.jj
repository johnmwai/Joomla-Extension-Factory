/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. html-3.2.jj */
/*@egen*/options {

	JAVA_UNICODE_ESCAPE = true;

  STATIC=false; 
             
               
                        
                      
}

PARSER_BEGIN(html32) 
package html;

public class html32/*@bgen(jjtree)*/implements html32TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJThtml32State jjtree = new JJThtml32State();

/*@egen*/
  

} 

PARSER_END(html32)

JAVACODE
void error_skipto(int kind) {/*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = (ASTerror_skipto)ASTerror_skipto.jjtCreate(this, JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  ParseException e = generateParseException();  // generate the exception object.
  System.err.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}

// ================================================================

SPECIAL_TOKEN :
{
	<		( " " | "\t" | "\n" | "\r" )+	>
|	<		"<!" ( ~[">"] )* ">"		>
}

TOKEN :
{
	<STAGO:		"<"				>	: TAG
|	<ETAGO:		"</"				>	: TAG
|	<PCDATA:	( ~["<"] )+			>
}

<TAG> TOKEN [IGNORE_CASE] :
{
	<A:		"a"				>	: ATTLIST
|	<ADDRESS:	"address"			>	: ATTLIST
|	<APPLET:	"applet"			>	: ATTLIST
|	<AREA:		"area"				>	: ATTLIST
|	<B:		"b"				>	: ATTLIST
|	<BASE:		"base"				>	: ATTLIST
|	<BASEFONT:	"basefont"			>	: ATTLIST
|	<BIG:		"big"				>	: ATTLIST
|	<BLOCKQUOTE:	"blockquote"			>	: ATTLIST
|	<BODY:		"body"				>	: ATTLIST
|	<BR:		"br"				>	: ATTLIST
|	<CAPTION:	"caption"			>	: ATTLIST
|	<CENTER:	"center"			>	: ATTLIST
|	<CITE:		"cite"				>	: ATTLIST
|	<CODE:		"code"				>	: ATTLIST
|	<DD:		"dd"				>	: ATTLIST
|	<DFN:		"dfn"				>	: ATTLIST
|	<DIR:		"dir"				>	: ATTLIST
|	<DIV:		"div"				>	: ATTLIST
|	<DL:		"dl"				>	: ATTLIST
|	<DT:		"dt"				>	: ATTLIST
|	<EM:		"em"				>	: ATTLIST
|	<FONT:		"font"				>	: ATTLIST
|	<FORM:		"form"				>	: ATTLIST
|	<H1:		"h1"				>	: ATTLIST
|	<H2:		"h2"				>	: ATTLIST
|	<H3:		"h3"				>	: ATTLIST
|	<H4:		"h4"				>	: ATTLIST
|	<H5:		"h5"				>	: ATTLIST
|	<H6:		"h6"				>	: ATTLIST
|	<HEAD:		"head"				>	: ATTLIST
|	<HR:		"hr"				>	: ATTLIST
|	<HTML:		"html"				>	: ATTLIST
|	<I:		"i"				>	: ATTLIST
|	<IMG:		"img"				>	: ATTLIST
|	<INPUT:		"input"				>	: ATTLIST
|	<ISINDEX:	"isindex"			>	: ATTLIST
|	<KBD:		"kbd"				>	: ATTLIST
|	<LI:		"li"				>	: ATTLIST
|	<LINK:		"link"				>	: ATTLIST
|	<MAP:		"map"				>	: ATTLIST
|	<MENU:		"menu"				>	: ATTLIST
|	<META:		"meta"				>	: ATTLIST
|	<OL:		"ol"				>	: ATTLIST
|	<OPTION:	"option"			>	: ATTLIST
|	<P:		"p"				>	: ATTLIST
|	<PARAM:		"param"				>	: ATTLIST
|	<PRE:		"pre"				>	: ATTLIST
|	<PROMPT:	"prompt"			>	: ATTLIST
|	<SAMP:		"samp"				>	: ATTLIST
|	<SCRIPT:	"script"			>	: ATTLIST
|	<SELECT:	"select"			>	: ATTLIST
|	<SMALL:		"small"				>	: ATTLIST
|	<STRIKE:	"strike"			>	: ATTLIST
|	<STRONG:	"strong"			>	: ATTLIST
|	<STYLE:		"style"				>	: ATTLIST
|	<SUB:		"sub"				>	: ATTLIST
|	<SUP:		"sup"				>	: ATTLIST
|	<TABLE:		"table"				>	: ATTLIST
|	<TD:		"td"				>	: ATTLIST
|	<TEXTAREA:	"textarea"			>	: ATTLIST
|	<TH:		"th"				>	: ATTLIST
|	<TITLE:		"title"				>	: ATTLIST
|	<TR:		"tr"				>	: ATTLIST
|	<TT:		"tt"				>	: ATTLIST
|	<U:		"u"				>	: ATTLIST
|	<UL:		"ul"				>	: ATTLIST
|	<VAR:		"var"				>	: ATTLIST
}

<ATTLIST> SKIP :
{
	<		" " | "\t" | "\n" | "\r" 	>
|	<		"--" 				>	: ATTCOMM
}

<ATTLIST> TOKEN :
{
	<TAGC:		">"				>	: DEFAULT
|	<A_EQ:		"="				>	: ATTRVAL

|	<#ALPHA:	["a"-"z","A"-"Z","_","-","."]	>
|	<#NUM:		["0"-"9"]			>
|	<#ALPHANUM:	<ALPHA> | <NUM>			>
|	<A_NAME:	<ALPHA> ( <ALPHANUM> )*		>

}

<ATTRVAL> TOKEN :
{
	<CDATA:		"'" ( ~["'"] )* "'"
		|	"\"" ( ~["\""] )* "\""
		| ( ~[">", "\"", "'", " ", "\t", "\n", "\r"] )+
							>	: ATTLIST
}

<ATTCOMM> SKIP :
{
	<		( ~["-"] )+			>
|	<		"-" ( ~["-"] )+			>
|	<		"--"				>	: ATTLIST
}


// ================================================================

void pcdata()  :
{/*@bgen(jjtree) pcdata */
  ASTpcdata jjtn000 = (ASTpcdata)ASTpcdata.jjtCreate(this, JJTPCDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) pcdata */
 try {
/*@egen*/<PCDATA>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}

void attribute():
{/*@bgen(jjtree) attribute */
        ASTattribute jjtn000 = (ASTattribute)ASTattribute.jjtCreate(this, JJTATTRIBUTE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token n, v = null;
}
{/*@bgen(jjtree) attribute */
 try {
/*@egen*/<A_NAME> [ <A_EQ> v=<CDATA> ]/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void attlist() : {/*@bgen(jjtree) attlist */
  ASTattlist jjtn000 = (ASTattlist)ASTattlist.jjtCreate(this, JJTATTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) attlist */
        try {
/*@egen*/
	( attribute() )+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Eheading()       : {}
{
	LOOKAHEAD(2) h1()
|	LOOKAHEAD(2) h2()
|	LOOKAHEAD(2) h3()
|	LOOKAHEAD(2) h4()
|	LOOKAHEAD(2) h5()
|	             h6()
}

void Epreformatted()       : {}
{
	pre()
}

void Elist()       : {}
{
	LOOKAHEAD(2) ul()
|	LOOKAHEAD(2) ol()
|	LOOKAHEAD(2) dir()
|	             menu()
}

void Efont()       : {}
{
	LOOKAHEAD(2) tt()
|	LOOKAHEAD(2) i()
|	LOOKAHEAD(2) b()
|	LOOKAHEAD(2) u()
|	LOOKAHEAD(2) strike()
|	LOOKAHEAD(2) big()
|	LOOKAHEAD(2) small()
|	LOOKAHEAD(2) sub()
|	             sup()
}

void Ephrase()       : {}
{
	LOOKAHEAD(2) em()
|	LOOKAHEAD(2) strong()
|	LOOKAHEAD(2) dfn()
|	LOOKAHEAD(2) code()
|	LOOKAHEAD(2) samp()
|	LOOKAHEAD(2) kbd()
|	LOOKAHEAD(2) _var()
|	             cite()
}

void Especial()       : {}
{
	LOOKAHEAD(2) a()
|	LOOKAHEAD(2) img()
|	LOOKAHEAD(2) applet()
|	LOOKAHEAD(2) font()
|	LOOKAHEAD(2) basefont()
|	LOOKAHEAD(2) br()
|	LOOKAHEAD(2) script()
|	             map()
}

void Eform()       : {}
{
	LOOKAHEAD(2) input()
|	LOOKAHEAD(2) select()
|	             textarea()
}

void Etext()       : {}
{
	             pcdata()
|	LOOKAHEAD(2) Efont()
|	LOOKAHEAD(2) Ephrase()
|	LOOKAHEAD(2) Especial()
|	             Eform()
}


void tt() : {/*@bgen(jjtree) tt */
  ASTtt jjtn000 = (ASTtt)ASTtt.jjtCreate(this, JJTTT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tt */
        try {
/*@egen*/
	<STAGO> <TT> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <TT> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void i() : {/*@bgen(jjtree) i */
  ASTi jjtn000 = (ASTi)ASTi.jjtCreate(this, JJTI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) i */
        try {
/*@egen*/
	<STAGO> <I> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <I> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void b() : {/*@bgen(jjtree) b */
  ASTb jjtn000 = (ASTb)ASTb.jjtCreate(this, JJTB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) b */
        try {
/*@egen*/
	<STAGO> <B> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <B> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void u() : {/*@bgen(jjtree) u */
  ASTu jjtn000 = (ASTu)ASTu.jjtCreate(this, JJTU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) u */
        try {
/*@egen*/
	<STAGO> <U> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <U> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void strike() : {/*@bgen(jjtree) strike */
  ASTstrike jjtn000 = (ASTstrike)ASTstrike.jjtCreate(this, JJTSTRIKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) strike */
        try {
/*@egen*/
	<STAGO> <STRIKE> [ attlist() ] <TAGC>
	( Etext() )*
	<ETAGO> <STRIKE> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void big() : {/*@bgen(jjtree) big */
  ASTbig jjtn000 = (ASTbig)ASTbig.jjtCreate(this, JJTBIG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) big */
        try {
/*@egen*/
	<STAGO> <BIG> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <BIG> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void small() : {/*@bgen(jjtree) small */
  ASTsmall jjtn000 = (ASTsmall)ASTsmall.jjtCreate(this, JJTSMALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) small */
        try {
/*@egen*/
	<STAGO> <SMALL> [ attlist() ] <TAGC>
	( Etext() )*
	<ETAGO> <SMALL> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void sub() : {/*@bgen(jjtree) sub */
  ASTsub jjtn000 = (ASTsub)ASTsub.jjtCreate(this, JJTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sub */
        try {
/*@egen*/
	<STAGO> <SUB> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <SUB> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void sup() : {/*@bgen(jjtree) sup */
  ASTsup jjtn000 = (ASTsup)ASTsup.jjtCreate(this, JJTSUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sup */
        try {
/*@egen*/
	<STAGO> <SUP> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <SUP> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void em() : {/*@bgen(jjtree) em */
  ASTem jjtn000 = (ASTem)ASTem.jjtCreate(this, JJTEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) em */
        try {
/*@egen*/
	<STAGO> <EM> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <EM> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void strong() : {/*@bgen(jjtree) strong */
  ASTstrong jjtn000 = (ASTstrong)ASTstrong.jjtCreate(this, JJTSTRONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) strong */
        try {
/*@egen*/
	<STAGO> <STRONG> [ attlist() ] <TAGC>
	( Etext() )*
	<ETAGO> <STRONG> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void dfn() : {/*@bgen(jjtree) dfn */
  ASTdfn jjtn000 = (ASTdfn)ASTdfn.jjtCreate(this, JJTDFN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dfn */
        try {
/*@egen*/
	<STAGO> <DFN> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <DFN> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void code() : {/*@bgen(jjtree) code */
  ASTcode jjtn000 = (ASTcode)ASTcode.jjtCreate(this, JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) code */
        try {
/*@egen*/
	<STAGO> <CODE> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <CODE> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void samp() : {/*@bgen(jjtree) samp */
  ASTsamp jjtn000 = (ASTsamp)ASTsamp.jjtCreate(this, JJTSAMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) samp */
        try {
/*@egen*/
	<STAGO> <SAMP> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <SAMP> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void kbd() : {/*@bgen(jjtree) kbd */
  ASTkbd jjtn000 = (ASTkbd)ASTkbd.jjtCreate(this, JJTKBD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) kbd */
        try {
/*@egen*/
	<STAGO> <KBD> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <KBD> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void _var() : {/*@bgen(jjtree) _var */
  AST_var jjtn000 = (AST_var)AST_var.jjtCreate(this, JJT_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _var */
        try {
/*@egen*/
	<STAGO> <VAR> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <VAR> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void cite() : {/*@bgen(jjtree) cite */
  ASTcite jjtn000 = (ASTcite)ASTcite.jjtCreate(this, JJTCITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) cite */
        try {
/*@egen*/
	<STAGO> <CITE> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <CITE> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void font() : {/*@bgen(jjtree) font */
  ASTfont jjtn000 = (ASTfont)ASTfont.jjtCreate(this, JJTFONT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) font */
        try {
/*@egen*/
	<STAGO> <FONT> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <FONT> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void basefont() : {/*@bgen(jjtree) basefont */
  ASTbasefont jjtn000 = (ASTbasefont)ASTbasefont.jjtCreate(this, JJTBASEFONT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) basefont */
        try {
/*@egen*/
	<STAGO> <BASEFONT> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void br() : {/*@bgen(jjtree) br */
  ASTbr jjtn000 = (ASTbr)ASTbr.jjtCreate(this, JJTBR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) br */
        try {
/*@egen*/
	<STAGO> <BR> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Eblock()       : {}
{
	LOOKAHEAD(2) p()
|	LOOKAHEAD(2) Elist()
|	LOOKAHEAD(2) Epreformatted()
|	LOOKAHEAD(2) dl()
|	LOOKAHEAD(2) div()
|	LOOKAHEAD(2) center()
|	LOOKAHEAD(2) blockquote()
|	LOOKAHEAD(2) form()
|	LOOKAHEAD(2) isindex()
|	LOOKAHEAD(2) hr()
|	LOOKAHEAD(2) table()
}

void Eflow()       : {}
{
	(LOOKAHEAD(2)
		(	LOOKAHEAD(2) Etext()
		|	             Eblock()
		)
	)*
}


void Ebody_content()       : {}
{
	(LOOKAHEAD(2)
		(	LOOKAHEAD(2) Eheading()
		|	LOOKAHEAD(2) Etext()
		|	LOOKAHEAD(2) Eblock()
		|	             address()
		)
	)*
}


void body() : {/*@bgen(jjtree) body */
  ASTbody jjtn000 = (ASTbody)ASTbody.jjtCreate(this, JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) body */
        try {
/*@egen*/
	[ LOOKAHEAD(2) <STAGO> <BODY> [ attlist() ] <TAGC> ]
	Ebody_content()
	[ LOOKAHEAD(2) <ETAGO> <BODY> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void address() : {/*@bgen(jjtree) address */
  ASTaddress jjtn000 = (ASTaddress)ASTaddress.jjtCreate(this, JJTADDRESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) address */
        try {
/*@egen*/
	<STAGO> <ADDRESS> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() | p() )*
	<ETAGO> <ADDRESS> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void div() : {/*@bgen(jjtree) div */
  ASTdiv jjtn000 = (ASTdiv)ASTdiv.jjtCreate(this, JJTDIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) div */
        try {
/*@egen*/
	<STAGO> <DIV> [ attlist() ] <TAGC>
	Ebody_content()
	<ETAGO> <DIV> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void center() : {/*@bgen(jjtree) center */
  ASTcenter jjtn000 = (ASTcenter)ASTcenter.jjtCreate(this, JJTCENTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) center */
        try {
/*@egen*/
	<STAGO> <CENTER> [ attlist() ] <TAGC>
	Ebody_content()
	<ETAGO> <CENTER> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// exclusion exception: a()
void a() : {/*@bgen(jjtree) a */
  ASTa jjtn000 = (ASTa)ASTa.jjtCreate(this, JJTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) a */
        try {
/*@egen*/
	<STAGO> <A> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <A> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void map() : {/*@bgen(jjtree) map */
  ASTmap jjtn000 = (ASTmap)ASTmap.jjtCreate(this, JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) map */
        try {
/*@egen*/
	<STAGO> <MAP> [ attlist() ] <TAGC> ( area() )* <ETAGO> <MAP> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void area() : {/*@bgen(jjtree) area */
  ASTarea jjtn000 = (ASTarea)ASTarea.jjtCreate(this, JJTAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) area */
        try {
/*@egen*/
	<STAGO> <AREA> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void link() : {/*@bgen(jjtree) link */
  ASTlink jjtn000 = (ASTlink)ASTlink.jjtCreate(this, JJTLINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) link */
        try {
/*@egen*/
	<STAGO> <LINK> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void img() : {/*@bgen(jjtree) img */
  ASTimg jjtn000 = (ASTimg)ASTimg.jjtCreate(this, JJTIMG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) img */
        try {
/*@egen*/
	<STAGO> <IMG> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// inclusion exception: param()
void applet() : {/*@bgen(jjtree) applet */
  ASTapplet jjtn000 = (ASTapplet)ASTapplet.jjtCreate(this, JJTAPPLET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) applet */
        try {
/*@egen*/
	<STAGO> <APPLET> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) param() | Etext() )*
	<ETAGO> <APPLET> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void param() : {/*@bgen(jjtree) param */
  ASTparam jjtn000 = (ASTparam)ASTparam.jjtCreate(this, JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param */
        try {
/*@egen*/
	<STAGO> <PARAM> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void hr() : {/*@bgen(jjtree) hr */
  ASThr jjtn000 = (ASThr)ASThr.jjtCreate(this, JJTHR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) hr */
        try {
/*@egen*/
	<STAGO> <HR> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void p() : {/*@bgen(jjtree) p */
  ASTp jjtn000 = (ASTp)ASTp.jjtCreate(this, JJTP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) p */
        try {
/*@egen*/
	<STAGO> <P> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	[ LOOKAHEAD(2) <ETAGO> <P> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void h1() : {/*@bgen(jjtree) h1 */
  ASTh1 jjtn000 = (ASTh1)ASTh1.jjtCreate(this, JJTH1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) h1 */
        try {
/*@egen*/
	<STAGO> <H1> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H1> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void h2() : {/*@bgen(jjtree) h2 */
  ASTh2 jjtn000 = (ASTh2)ASTh2.jjtCreate(this, JJTH2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) h2 */
        try {
/*@egen*/
	<STAGO> <H2> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H2> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void h3() : {/*@bgen(jjtree) h3 */
  ASTh3 jjtn000 = (ASTh3)ASTh3.jjtCreate(this, JJTH3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) h3 */
        try {
/*@egen*/
	<STAGO> <H3> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H3> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void h4() : {/*@bgen(jjtree) h4 */
  ASTh4 jjtn000 = (ASTh4)ASTh4.jjtCreate(this, JJTH4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) h4 */
        try {
/*@egen*/
	<STAGO> <H4> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H4> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void h5() : {/*@bgen(jjtree) h5 */
  ASTh5 jjtn000 = (ASTh5)ASTh5.jjtCreate(this, JJTH5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) h5 */
        try {
/*@egen*/
	<STAGO> <H5> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H5> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void h6() : {/*@bgen(jjtree) h6 */
  ASTh6 jjtn000 = (ASTh6)ASTh6.jjtCreate(this, JJTH6);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) h6 */
        try {
/*@egen*/
	<STAGO> <H6> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H6> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// exclusion exception: img(), big(), small(), sub(), sup(), font()
void pre() : {/*@bgen(jjtree) pre */
  ASTpre jjtn000 = (ASTpre)ASTpre.jjtCreate(this, JJTPRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pre */
        try {
/*@egen*/
	<STAGO> <PRE> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <PRE> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void blockquote() : {/*@bgen(jjtree) blockquote */
  ASTblockquote jjtn000 = (ASTblockquote)ASTblockquote.jjtCreate(this, JJTBLOCKQUOTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) blockquote */
        try {
/*@egen*/
	<STAGO> <BLOCKQUOTE> [ attlist() ] <TAGC>
	Ebody_content()
	<ETAGO> <BLOCKQUOTE> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void dl() : {/*@bgen(jjtree) dl */
  ASTdl jjtn000 = (ASTdl)ASTdl.jjtCreate(this, JJTDL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dl */
        try {
/*@egen*/
	<STAGO> <DL> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) dt() | dd() )*
	<ETAGO> <DL> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void dt() : {/*@bgen(jjtree) dt */
  ASTdt jjtn000 = (ASTdt)ASTdt.jjtCreate(this, JJTDT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dt */
        try {
/*@egen*/
	<STAGO> <DT> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	[ LOOKAHEAD(2) <ETAGO> <DT> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void dd() : {/*@bgen(jjtree) dd */
  ASTdd jjtn000 = (ASTdd)ASTdd.jjtCreate(this, JJTDD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dd */
        try {
/*@egen*/
	<STAGO> <DD> [ attlist() ] <TAGC>
	Eflow()
	[ LOOKAHEAD(2) <ETAGO> <DD> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ol() : {/*@bgen(jjtree) ol */
  ASTol jjtn000 = (ASTol)ASTol.jjtCreate(this, JJTOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ol */
        try {
/*@egen*/
	<STAGO> <OL> [ attlist() ] <TAGC> ( li() )* <ETAGO> <OL> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ul() : {/*@bgen(jjtree) ul */
  ASTul jjtn000 = (ASTul)ASTul.jjtCreate(this, JJTUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ul */
        try {
/*@egen*/
	<STAGO> <UL> [ attlist() ] <TAGC> ( li() )* <ETAGO> <UL> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// exclusion exception: Eblock()
void dir() : {/*@bgen(jjtree) dir */
  ASTdir jjtn000 = (ASTdir)ASTdir.jjtCreate(this, JJTDIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dir */
        try {
/*@egen*/
	<STAGO> <DIR> [ attlist() ] <TAGC> ( li() )* <ETAGO> <DIR> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// exclusion exception: Eblock()
void menu() : {/*@bgen(jjtree) menu */
  ASTmenu jjtn000 = (ASTmenu)ASTmenu.jjtCreate(this, JJTMENU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) menu */
        try {
/*@egen*/
	<STAGO> <MENU> [ attlist() ] <TAGC> ( li() )* <ETAGO> <MENU> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void li() : {/*@bgen(jjtree) li */
  ASTli jjtn000 = (ASTli)ASTli.jjtCreate(this, JJTLI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) li */
        try {
/*@egen*/
	<STAGO> <LI> [ attlist() ] <TAGC>
	Eflow()
	[ LOOKAHEAD(2) <ETAGO> <LI> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// exclusion exception: form()
void form() : {/*@bgen(jjtree) form */
  ASTform jjtn000 = (ASTform)ASTform.jjtCreate(this, JJTFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) form */
        try {
/*@egen*/
	<STAGO> <FORM> [ attlist() ] <TAGC>
	Ebody_content()
	<ETAGO> <FORM> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void input() : {/*@bgen(jjtree) input */
  ASTinput jjtn000 = (ASTinput)ASTinput.jjtCreate(this, JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) input */
        try {
/*@egen*/
	<STAGO> <INPUT> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void select() : {/*@bgen(jjtree) select */
  ASTselect jjtn000 = (ASTselect)ASTselect.jjtCreate(this, JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) select */
        try {
/*@egen*/
	<STAGO> <SELECT> [ attlist() ] <TAGC>
	( option() )+
	<ETAGO> <OPTION> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void option() : {/*@bgen(jjtree) option */
  ASToption jjtn000 = (ASToption)ASToption.jjtCreate(this, JJTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) option */
        try {
/*@egen*/
	<STAGO> <OPTION> [ attlist() ] <TAGC>
	( pcdata() )*
	[ LOOKAHEAD(2) <ETAGO> <OPTION> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void textarea() : {/*@bgen(jjtree) textarea */
  ASTtextarea jjtn000 = (ASTtextarea)ASTtextarea.jjtCreate(this, JJTTEXTAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) textarea */
        try {
/*@egen*/
	<STAGO> <TEXTAREA> [ attlist() ] <TAGC>
	( pcdata() )*
	<ETAGO> <TEXTAREA> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void table() : {/*@bgen(jjtree) table */
  ASTtable jjtn000 = (ASTtable)ASTtable.jjtCreate(this, JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) table */
        try {
/*@egen*/
	<STAGO> <TABLE> [ attlist() ] <TAGC>
	[ LOOKAHEAD(2) caption() ] ( tr() )+
	<ETAGO> <TABLE> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void tr() : {/*@bgen(jjtree) tr */
  ASTtr jjtn000 = (ASTtr)ASTtr.jjtCreate(this, JJTTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tr */
        try {
/*@egen*/
	<STAGO> <TR> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) ( LOOKAHEAD(2) th() | td()) )*
	[ LOOKAHEAD(2) <ETAGO> <TR> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void th() : {/*@bgen(jjtree) th */
  ASTth jjtn000 = (ASTth)ASTth.jjtCreate(this, JJTTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) th */
        try {
/*@egen*/
	<STAGO> <TH> [ attlist() ] <TAGC>
	Ebody_content()
	[ LOOKAHEAD(2) <ETAGO> <TH> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void td() : {/*@bgen(jjtree) td */
  ASTtd jjtn000 = (ASTtd)ASTtd.jjtCreate(this, JJTTD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) td */
        try {
/*@egen*/
	<STAGO> <TD> [ attlist() ] <TAGC>
	Ebody_content()
	[ LOOKAHEAD(2) <ETAGO> <TD> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void caption() : {/*@bgen(jjtree) caption */
  ASTcaption jjtn000 = (ASTcaption)ASTcaption.jjtCreate(this, JJTCAPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) caption */
        try {
/*@egen*/
	<STAGO> <CAPTION> [ attlist() ] <TAGC>
	( Etext() )*
	<ETAGO> <CAPTION> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// This is a hack to fake the inclusion exceptions within HEAD
// elements.
void Ehead_misc()       : {}
{
	(LOOKAHEAD(2)
		(	LOOKAHEAD(2) script()
		|	LOOKAHEAD(2) style()
		|	LOOKAHEAD(2) meta()
		|	             link()
		)
	)*
}


// inclusion exception: Ehead_misc
// should use & connector: title() & (isindex())? & base()?
void head() : {/*@bgen(jjtree) head */
  ASThead jjtn000 = (ASThead)ASThead.jjtCreate(this, JJTHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) head */
        try {
/*@egen*/
	[ LOOKAHEAD(2) <STAGO> <HEAD> [ attlist() ] <TAGC> ]
	Ehead_misc()
	title()
	Ehead_misc()
	[ LOOKAHEAD(2) isindex() ]
	Ehead_misc()
	[ LOOKAHEAD(2) base() ]
	Ehead_misc()
	[ LOOKAHEAD(2) <ETAGO> <HEAD> <TAGC> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// exclusion exception: Ehead_misc()
void title() : {/*@bgen(jjtree) title */
  ASTtitle jjtn000 = (ASTtitle)ASTtitle.jjtCreate(this, JJTTITLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) title */
        try {
/*@egen*/
	<STAGO> <TITLE> [ attlist() ] <TAGC>
	( pcdata() )*
	<ETAGO> <TITLE> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void isindex() : {/*@bgen(jjtree) isindex */
  ASTisindex jjtn000 = (ASTisindex)ASTisindex.jjtCreate(this, JJTISINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) isindex */
        try {
/*@egen*/
	<STAGO> <ISINDEX> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void base() : {/*@bgen(jjtree) base */
  ASTbase jjtn000 = (ASTbase)ASTbase.jjtCreate(this, JJTBASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) base */
        try {
/*@egen*/
	<STAGO> <BASE> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void meta() : {/*@bgen(jjtree) meta */
  ASTmeta jjtn000 = (ASTmeta)ASTmeta.jjtCreate(this, JJTMETA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) meta */
        try {
/*@egen*/
	<STAGO> <META> [ attlist() ] <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// exclusion exception: Ehead_misc()
void style() : {/*@bgen(jjtree) style */
  ASTstyle jjtn000 = (ASTstyle)ASTstyle.jjtCreate(this, JJTSTYLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) style */
        try {
/*@egen*/
	<STAGO> <STYLE> [ attlist() ] <TAGC>
	( pcdata() )*
	<ETAGO> <SCRIPT> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// exclusion exception: Ehead_misc()
void script() : {/*@bgen(jjtree) script */
  ASTscript jjtn000 = (ASTscript)ASTscript.jjtCreate(this, JJTSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) script */
        try {
/*@egen*/
	<STAGO> <SCRIPT> [ attlist() ] <TAGC>
	( pcdata() )*
	<ETAGO> <SCRIPT> <TAGC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

 
SimpleNode html() : {/*@bgen(jjtree) html */
  ASThtml jjtn000 = (ASThtml)ASThtml.jjtCreate(this, JJTHTML);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) html */
  try {
/*@egen*/ try{  
	[ LOOKAHEAD(2) <STAGO> <HTML> [ attlist() ] <TAGC> ]
	head() body()
	[ LOOKAHEAD(2) <ETAGO> <HTML> <TAGC> ]}catch (Exception e)
  {
    error_skipto(EOF);
  }/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* end */
