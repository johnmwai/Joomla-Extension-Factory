/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. css.jj */
/*@egen*/options {
JAVA_UNICODE_ESCAPE = true;

  STATIC=false; 
             
               
                        
                      
  ERROR_REPORTING = false;
  IGNORE_CASE = true;
}


PARSER_BEGIN(CSSParser)
package css;

/**
 * Grammar to parse CSS Style
 * @author Daniel Dus - based on http://www.w3.org/TR/CSS21/grammar.htm
 */
public class CSSParser/*@bgen(jjtree)*/implements CSSParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTCSSParserState jjtree = new JJTCSSParserState();

/*@egen*/


}

PARSER_END(CSSParser)

JAVACODE
void error_skipto(int kind) {/*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = (ASTerror_skipto)ASTerror_skipto.jjtCreate(this, JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  ParseException e = generateParseException();  // generate the exception object.
  System.err.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}

/* LEXER RULES */

// White space to ignore
SPECIAL_TOKEN:
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

// Comments
MORE:
{
        < "<!--" ~["-"] > : IN_MULTI_COMMENT
}

SPECIAL_TOKEN:
{
  <SINGLE_LINE_COMMENT: "/*" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
}

<IN_MULTI_COMMENT>
SPECIAL_TOKEN:
{
        <MULTI_COMMENT: "-->" > : DEFAULT
}


TOKEN:
{
        <CHARSET_SYM: "@charset ">
    |<IMPORT_SYM: "@import" >
    |<MEDIA_SYM: "@media" >
    |<PAGE_SYM: "@page" >
    |<HASH: "#">
    |<SEPARATOR: ";">
}


TOKEN:
{
    <INCLUDES: "~=">
   |<DASHMATCH: "|=">
   |<PLUS: "+">
   |<MINUS: "-">
   |<LPAREN: "(">
   |<RPAREN: ")">
   |<LBRACE: "{">
   |<RBRACE: "}">
   |<COMMA: ",">
   |<COLON: ":">
   |<SLASH: "/">
   |<ALLGROUP: "*">
   |<GT: ">">

}

/* LITERALS */

TOKEN :
{
  < IDENT: (["-"])? <LETTER> (<PART_LETTER>)* >
|
 <IMPORTANT_SYM: "!" (<PART_LETTER>)* "important" > 
|
  < #LETTER:
      [  
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}


TOKEN :
{

 <NUMBER: <NUMBER_LITERAL>  (["l"])?>
 |
 <EMS: <NUMBER_LITERAL> "em" >
 |
 <EXS: <NUMBER_LITERAL> "ex" >
 |
 < PERCENTAGE: <NUMBER_LITERAL> "%" >
|
  < LENGTH: <NUMBER_LITERAL> ("px" | "cm" | "mm" | "in" | "pt" | "pc" ) >
|
  < ANGLE: <NUMBER_LITERAL> ("deg" | "rad" | "grad" ) >
|
  < TIME: <NUMBER_LITERAL> ("s" | "ms" ) >
|
 < FREQ: <NUMBER_LITERAL> ("hz" | "khz" ) >
|
< #NUMBER_LITERAL: ["1"-"9"] (["0"-"9"])* ["."] (["0"-"9"])*  >
|
<URI: "url" "(" (<CHAR_LITERAL> | <STRING_LITERAL>) ")">
|
<STRING : < STRING_LITERAL> | <CHAR_LITERAL> >
|
< #CHAR_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                        ["0"-"9","A"-"F","a"-"f"]
                        ["0"-"9","A"-"F","a"-"f"]
                        ["0"-"9","A"-"F","a"-"f"]
                        ["0"-"9","A"-"F","a"-"f"]
          )
                | ("\\x"
                        ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                  )
      )
      "'"
  >
|
  < #STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "\""
  >
  
}



ASTstylesheet stylesheet() :
{/*@bgen(jjtree) stylesheet */
  ASTstylesheet jjtn000 = (ASTstylesheet)ASTstylesheet.jjtCreate(this, JJTSTYLESHEET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) stylesheet */
 try {
/*@egen*/try{  
    [<CHARSET_SYM> <STRING> ";"] 
    ( css_import()  | ruleset() | media() | page() )*
        <EOF>      }      catch (ParseException e)
  {
    error_skipto(EOF);
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void singleStyle() :
{/*@bgen(jjtree) singleStyle */
  ASTsingleStyle jjtn000 = (ASTsingleStyle)ASTsingleStyle.jjtCreate(this, JJTSINGLESTYLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) singleStyle */
    try {
/*@egen*/
    declaration() ( ";" declaration() )* <EOF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void css_import() :
{/*@bgen(jjtree) css_import */
  ASTcss_import jjtn000 = (ASTcss_import)ASTcss_import.jjtCreate(this, JJTCSS_IMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) css_import */
        try {
/*@egen*/
        <IMPORT_SYM> (<STRING>|<URI>) [media_list()] ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void media() :
{/*@bgen(jjtree) media */
  ASTmedia jjtn000 = (ASTmedia)ASTmedia.jjtCreate(this, JJTMEDIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) media */
        try {
/*@egen*/
        <MEDIA_SYM> media_list() "{" (ruleset())* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void media_list() :
{/*@bgen(jjtree) media_list */
  ASTmedia_list jjtn000 = (ASTmedia_list)ASTmedia_list.jjtCreate(this, JJTMEDIA_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) media_list */
        try {
/*@egen*/
        <IDENT> [<COMMA> <IDENT>]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void page() :
{/*@bgen(jjtree) page */
  ASTpage jjtn000 = (ASTpage)ASTpage.jjtCreate(this, JJTPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) page */
        try {
/*@egen*/
        <PAGE_SYM> [pageID()] "{" declaration() (";" declaration())* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void pageID() :
{/*@bgen(jjtree) pageID */
  ASTpageID jjtn000 = (ASTpageID)ASTpageID.jjtCreate(this, JJTPAGEID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pageID */
        try {
/*@egen*/
        ":" <IDENT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void operator_expr() :
{/*@bgen(jjtree) operator_expr */
  ASToperator_expr jjtn000 = (ASToperator_expr)ASToperator_expr.jjtCreate(this, JJTOPERATOR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operator_expr */
        try {
/*@egen*/
        "/" | ","/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void combinator() :
{/*@bgen(jjtree) combinator */
  ASTcombinator jjtn000 = (ASTcombinator)ASTcombinator.jjtCreate(this, JJTCOMBINATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) combinator */
        try {
/*@egen*/
        "+" | ">"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void unary_operator() :
{/*@bgen(jjtree) unary_operator */
  ASTunary_operator jjtn000 = (ASTunary_operator)ASTunary_operator.jjtCreate(this, JJTUNARY_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) unary_operator */
   try {
/*@egen*/
   "-" | "+"/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/

}

void ruleset() :
{/*@bgen(jjtree) ruleset */
  ASTruleset jjtn000 = (ASTruleset)ASTruleset.jjtCreate(this, JJTRULESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ruleset */
  try {
/*@egen*/
  selector() ( "," selector() )* "{" declaration() ( ";" declaration() )* "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void selector() :
{/*@bgen(jjtree) selector */
  ASTselector jjtn000 = (ASTselector)ASTselector.jjtCreate(this, JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) selector */
  try {
/*@egen*/
  simple_selector() [ combinator() selector() /*| [ [combinator()] selector() ] */]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void simple_selector() :
{/*@bgen(jjtree) simple_selector */
  ASTsimple_selector jjtn000 = (ASTsimple_selector)ASTsimple_selector.jjtCreate(this, JJTSIMPLE_SELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_selector */
  try {
/*@egen*/
  element_name() /* ( <HASH> | class_ident() | attrib() | pseudo() )*  */
  | ( <HASH> | class_ident() | attrib() | pseudo() )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void class_ident() :
{/*@bgen(jjtree) class_ident */
  ASTclass_ident jjtn000 = (ASTclass_ident)ASTclass_ident.jjtCreate(this, JJTCLASS_IDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) class_ident */
  try {
/*@egen*/
  "." <IDENT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
 
void element_name() :
{/*@bgen(jjtree) element_name */
  ASTelement_name jjtn000 = (ASTelement_name)ASTelement_name.jjtCreate(this, JJTELEMENT_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) element_name */
  try {
/*@egen*/
  <IDENT> | "*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void attrib() :
{/*@bgen(jjtree) attrib */
  ASTattrib jjtn000 = (ASTattrib)ASTattrib.jjtCreate(this, JJTATTRIB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) attrib */
  try {
/*@egen*/
  "[" <IDENT> [ ( "=" | <INCLUDES> | <DASHMATCH> ) ( <IDENT> | <STRING> ) ] "]"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pseudo() :
{/*@bgen(jjtree) pseudo */
  ASTpseudo jjtn000 = (ASTpseudo)ASTpseudo.jjtCreate(this, JJTPSEUDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pseudo */
   try {
/*@egen*/
   ":" [LOOKAHEAD(2) <IDENT> | function_expr() ]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void declaration() :
{/*@bgen(jjtree) declaration */
  ASTdeclaration jjtn000 = (ASTdeclaration)ASTdeclaration.jjtCreate(this, JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaration */
  try {
/*@egen*/
  <IDENT> ":" expr() [<IMPORTANT_SYM>]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expr() :
{/*@bgen(jjtree) expr */
  ASTexpr jjtn000 = (ASTexpr)ASTexpr.jjtCreate(this, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expr */
  try {
/*@egen*/
  term() ( [operator_expr()] term() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void term() :
{/*@bgen(jjtree) term */
  ASTterm jjtn000 = (ASTterm)ASTterm.jjtCreate(this, JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) term */
  try {
/*@egen*/
  [unary_operator()]  
   <NUMBER>  
    | <PERCENTAGE>  
    | <LENGTH>  
    | <EMS>  
    | <EXS>  
    | <ANGLE>  
    | <TIME>  
    | <FREQ>  
    | <STRING>  
   | LOOKAHEAD(2) <IDENT>  
   | <URI>  
   | <HASH> 
   | function_expr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void function_expr() :
{/*@bgen(jjtree) function_expr */
  ASTfunction_expr jjtn000 = (ASTfunction_expr)ASTfunction_expr.jjtCreate(this, JJTFUNCTION_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_expr */
    try {
/*@egen*/
    <IDENT> "(" expr() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
 * There is a constraint on the color that it must
 * have either 3 or 6 hex-digits (i.e., [0-9a-fA-F])
 * after the "#"; e.g., "#000" is OK, but "#abcd" is not.
 
hexcolor
  : HASH 
  ;
  */