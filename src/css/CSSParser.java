/* Generated By:JJTree&JavaCC: Do not edit this line. CSSParser.java */
package css;

/**
 * Grammar to parse CSS Style
 * @author Daniel Dus - based on http://www.w3.org/TR/CSS21/grammar.htm
 */
public class CSSParser/*@bgen(jjtree)*/implements CSSParserTreeConstants, CSSParserConstants {/*@bgen(jjtree)*/
  protected JJTCSSParserState jjtree = new JJTCSSParserState();

  void error_skipto(int kind) throws ParseException {
                             /*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = (ASTerror_skipto)ASTerror_skipto.jjtCreate(this, JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {ParseException e = generateParseException();  // generate the exception object.
  System.err.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public ASTstylesheet stylesheet() throws ParseException {
 /*@bgen(jjtree) stylesheet */
  ASTstylesheet jjtn000 = (ASTstylesheet)ASTstylesheet.jjtCreate(this, JJTSTYLESHEET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHARSET_SYM:
          jj_consume_token(CHARSET_SYM);
          jj_consume_token(STRING);
          jj_consume_token(SEPARATOR);
          break;
        default:
          ;
        }
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPORT_SYM:
          case MEDIA_SYM:
          case PAGE_SYM:
          case HASH:
          case COLON:
          case ALLGROUP:
          case IDENT:
          case 45:
          case 46:
            ;
            break;
          default:
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPORT_SYM:
            css_import();
            break;
          case HASH:
          case COLON:
          case ALLGROUP:
          case IDENT:
          case 45:
          case 46:
            ruleset();
            break;
          case MEDIA_SYM:
            media();
            break;
          case PAGE_SYM:
            page();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(0);
      } catch (ParseException e) {
    error_skipto(EOF);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public void singleStyle() throws ParseException {
 /*@bgen(jjtree) singleStyle */
  ASTsingleStyle jjtn000 = (ASTsingleStyle)ASTsingleStyle.jjtCreate(this, JJTSINGLESTYLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      declaration();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARATOR:
          ;
          break;
        default:
          break label_2;
        }
        jj_consume_token(SEPARATOR);
        declaration();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void css_import() throws ParseException {
 /*@bgen(jjtree) css_import */
  ASTcss_import jjtn000 = (ASTcss_import)ASTcss_import.jjtCreate(this, JJTCSS_IMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT_SYM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case URI:
        jj_consume_token(URI);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        media_list();
        break;
      default:
        ;
      }
      jj_consume_token(SEPARATOR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void media() throws ParseException {
 /*@bgen(jjtree) media */
  ASTmedia jjtn000 = (ASTmedia)ASTmedia.jjtCreate(this, JJTMEDIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MEDIA_SYM);
      media_list();
      jj_consume_token(LBRACE);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASH:
        case COLON:
        case ALLGROUP:
        case IDENT:
        case 45:
        case 46:
          ;
          break;
        default:
          break label_3;
        }
        ruleset();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void media_list() throws ParseException {
 /*@bgen(jjtree) media_list */
  ASTmedia_list jjtn000 = (ASTmedia_list)ASTmedia_list.jjtCreate(this, JJTMEDIA_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(IDENT);
        break;
      default:
        ;
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void page() throws ParseException {
 /*@bgen(jjtree) page */
  ASTpage jjtn000 = (ASTpage)ASTpage.jjtCreate(this, JJTPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PAGE_SYM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        pageID();
        break;
      default:
        ;
      }
      jj_consume_token(LBRACE);
      declaration();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARATOR:
          ;
          break;
        default:
          break label_4;
        }
        jj_consume_token(SEPARATOR);
        declaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void pageID() throws ParseException {
 /*@bgen(jjtree) pageID */
  ASTpageID jjtn000 = (ASTpageID)ASTpageID.jjtCreate(this, JJTPAGEID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COLON);
      jj_consume_token(IDENT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void operator_expr() throws ParseException {
 /*@bgen(jjtree) operator_expr */
  ASToperator_expr jjtn000 = (ASToperator_expr)ASToperator_expr.jjtCreate(this, JJTOPERATOR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void combinator() throws ParseException {
 /*@bgen(jjtree) combinator */
  ASTcombinator jjtn000 = (ASTcombinator)ASTcombinator.jjtCreate(this, JJTCOMBINATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void unary_operator() throws ParseException {
 /*@bgen(jjtree) unary_operator */
  ASTunary_operator jjtn000 = (ASTunary_operator)ASTunary_operator.jjtCreate(this, JJTUNARY_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ruleset() throws ParseException {
 /*@bgen(jjtree) ruleset */
  ASTruleset jjtn000 = (ASTruleset)ASTruleset.jjtCreate(this, JJTRULESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      selector();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_5;
        }
        jj_consume_token(COMMA);
        selector();
      }
      jj_consume_token(LBRACE);
      declaration();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARATOR:
          ;
          break;
        default:
          break label_6;
        }
        jj_consume_token(SEPARATOR);
        declaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void selector() throws ParseException {
 /*@bgen(jjtree) selector */
  ASTselector jjtn000 = (ASTselector)ASTselector.jjtCreate(this, JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      simple_selector();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case GT:
        combinator();
        selector();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void simple_selector() throws ParseException {
 /*@bgen(jjtree) simple_selector */
  ASTsimple_selector jjtn000 = (ASTsimple_selector)ASTsimple_selector.jjtCreate(this, JJTSIMPLE_SELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALLGROUP:
      case IDENT:
        element_name();
        break;
      case HASH:
      case COLON:
      case 45:
      case 46:
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASH:
            jj_consume_token(HASH);
            break;
          case 45:
            class_ident();
            break;
          case 46:
            attrib();
            break;
          case COLON:
            pseudo();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASH:
          case COLON:
          case 45:
          case 46:
            ;
            break;
          default:
            break label_7;
          }
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void class_ident() throws ParseException {
 /*@bgen(jjtree) class_ident */
  ASTclass_ident jjtn000 = (ASTclass_ident)ASTclass_ident.jjtCreate(this, JJTCLASS_IDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(45);
      jj_consume_token(IDENT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void element_name() throws ParseException {
 /*@bgen(jjtree) element_name */
  ASTelement_name jjtn000 = (ASTelement_name)ASTelement_name.jjtCreate(this, JJTELEMENT_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        jj_consume_token(IDENT);
        break;
      case ALLGROUP:
        jj_consume_token(ALLGROUP);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void attrib() throws ParseException {
 /*@bgen(jjtree) attrib */
  ASTattrib jjtn000 = (ASTattrib)ASTattrib.jjtCreate(this, JJTATTRIB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(46);
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDES:
      case DASHMATCH:
      case 47:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          jj_consume_token(47);
          break;
        case INCLUDES:
          jj_consume_token(INCLUDES);
          break;
        case DASHMATCH:
          jj_consume_token(DASHMATCH);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(IDENT);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      jj_consume_token(48);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void pseudo() throws ParseException {
 /*@bgen(jjtree) pseudo */
  ASTpseudo jjtn000 = (ASTpseudo)ASTpseudo.jjtCreate(this, JJTPSEUDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        if (jj_2_1(2)) {
          jj_consume_token(IDENT);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            function_expr();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void declaration() throws ParseException {
 /*@bgen(jjtree) declaration */
  ASTdeclaration jjtn000 = (ASTdeclaration)ASTdeclaration.jjtCreate(this, JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENT);
      jj_consume_token(COLON);
      expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORTANT_SYM:
        jj_consume_token(IMPORTANT_SYM);
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void expr() throws ParseException {
 /*@bgen(jjtree) expr */
  ASTexpr jjtn000 = (ASTexpr)ASTexpr.jjtCreate(this, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      term();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASH:
        case PLUS:
        case MINUS:
        case COMMA:
        case SLASH:
        case IDENT:
        case NUMBER:
        case EMS:
        case EXS:
        case PERCENTAGE:
        case LENGTH:
        case ANGLE:
        case TIME:
        case FREQ:
        case URI:
        case STRING:
          ;
          break;
        default:
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
        case SLASH:
          operator_expr();
          break;
        default:
          ;
        }
        term();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void term() throws ParseException {
 /*@bgen(jjtree) term */
  ASTterm jjtn000 = (ASTterm)ASTterm.jjtCreate(this, JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case NUMBER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          unary_operator();
          break;
        default:
          ;
        }
        jj_consume_token(NUMBER);
        break;
      case PERCENTAGE:
        jj_consume_token(PERCENTAGE);
        break;
      case LENGTH:
        jj_consume_token(LENGTH);
        break;
      case EMS:
        jj_consume_token(EMS);
        break;
      case EXS:
        jj_consume_token(EXS);
        break;
      case ANGLE:
        jj_consume_token(ANGLE);
        break;
      case TIME:
        jj_consume_token(TIME);
        break;
      case FREQ:
        jj_consume_token(FREQ);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        if (jj_2_2(2)) {
          jj_consume_token(IDENT);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case URI:
            jj_consume_token(URI);
            break;
          case HASH:
            jj_consume_token(HASH);
            break;
          case IDENT:
            function_expr();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void function_expr() throws ParseException {
 /*@bgen(jjtree) function_expr */
  ASTfunction_expr jjtn000 = (ASTfunction_expr)ASTfunction_expr.jjtCreate(this, JJTFUNCTION_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENT);
      jj_consume_token(LPAREN);
      expr();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CSSParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public CSSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CSSParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor. */
  public CSSParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CSSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public CSSParser(CSSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(CSSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
