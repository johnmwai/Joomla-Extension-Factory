/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. php.jj */
/*@egen*//*

  PHP grammar defintion for use with JavaCC
  By Satyam (satyam@satyam.com.ar)

  This is a partial grammar which I meant to use in a project of mine.
  I refined it a little bit beyond my specific need, but didn't go to the very end.
  It works for the purpose of my project, but it is not complete.

  It was tested by parsing all the source files in the PHP 5.0 test suite,
  and a couple of other applications (a CMS and an image gallery).
  Some files in these sets were skipped because they use syntax not supported
  in this parser, as noted in the TODO lists below.


TODO:

- Alternate notation for control flow, if: endif, etc.
- Curly braces to disambiguate variable variable array references: ${$a[1]} against ${$a}[1]
- Notice comment on line 555
- There are a couple of warnings when compiling which I wasn't able to solve nor was I able
  to figure out if they mattered at all.
*/options{  JAVA_UNICODE_ESCAPE = true;  STATIC = false;                                                                                }PARSER_BEGIN(PHP)package php;import java.util.*;public class PHP/*@bgen(jjtree)*/implements PHPTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTPHPState jjtree = new JJTPHPState();

/*@egen*/
int mwaicounter = 0;
  }PARSER_END(PHP)TOKEN_MGR_DECLS :{  static String HereDocEnd;}

JAVACODE
void error_skipto(int kind) {/*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = (ASTerror_skipto)ASTerror_skipto.jjtCreate(this, JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  ParseException e = generateParseException();  // generate the exception object.
  System.err.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}< HTML_STATE >TOKEN [ IGNORE_CASE ] :{  < PHP_BEGIN : "<?" ("php")? > : DEFAULT| < PHP_EXPR : "<?=" > : DEFAULT| < HTML_OTHER : "<" ~[ ] >}< HTML_STATE >TOKEN :{  < HTML :    (      ~[ "<" ]    | "<" ~[ "?" ]    )+ >}< DEFAULT >SPECIAL_TOKEN :{  " "| "\t"| "\n"| "\r"| < SLASH_SLASH_COMMENT :    "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < NUMERAL_COMMENT :    "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < SLASH_STAR_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >}< DEFAULT >TOKEN :{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >| < FLOATING_POINT_LITERAL :    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >| < DOUBLE_STRING_LITERAL_START : "\"" > : DOUBLE_STRING_LITERAL| < SINGLE_STRING_LITERAL_START : "'" > : SINGLE_STRING_LITERAL| < HEREDOC_START : "<<<" > : HEREDOC1}< SINGLE_STRING_LITERAL >MORE :{  < "\\" > : SSL_SPECIAL}< SINGLE_STRING_LITERAL >TOKEN :{  < SINGLE_STRING_LITERAL_END : "'" > : DEFAULT}< SINGLE_STRING_LITERAL >MORE :{  < (~[ ]) >}< SSL_SPECIAL >MORE :{  < [ "'", "\\" ] > : SINGLE_STRING_LITERAL| < ~[ ] > : SINGLE_STRING_LITERAL}< DOUBLE_STRING_LITERAL >TOKEN :{  < DOUBLE_STRING_LITERAL_END : "\"" > : DEFAULT}< DOUBLE_STRING_LITERAL >TOKEN :{  < DSL_SIMPLE_VAR_START : "$" > : DSL_SIMPLE_VAR| < DSL_COMPLEX_VAR_START :    (      "{$"    | "${"    ) >  : DSL_COMPLEX_VAR}< DOUBLE_STRING_LITERAL >MORE :{  < "\\" > : DSL_SPECIAL}< DOUBLE_STRING_LITERAL >MORE :{  < TEXT : (~[ ]) >}< DSL_COMPLEX_VAR >TOKEN :{  < DSL_COMPLEX_VAR_END : "}" > : DOUBLE_STRING_LITERAL}< DSL_COMPLEX_VAR >MORE :{  < DSL_CV_TEXT : (~[ ]) >}< DSL_SIMPLE_VAR >TOKEN :{  < DSL_SIMPLE_VAR_END : < IDENTIFIER > ("[" < IDENTIFIER > "]")? > : DOUBLE_STRING_LITERAL}< DSL_SIMPLE_VAR >TOKEN :{  < DSL_SIMPLE_STRING_VAR_END : "\"" > : DEFAULT}< DSL_SIMPLE_VAR >TOKEN :{  < DSL_SIMPLE_VAR_WASNT : ~[ ] > : DOUBLE_STRING_LITERAL}< DSL_SPECIAL >MORE :{  < [ "n", "t", "b", "r", "f", "\\", "\"", "$", "{" ] > : DOUBLE_STRING_LITERAL| <    (      [ "0"-"7" ] ([ "0"-"7" ])?    | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]    ) >  : DOUBLE_STRING_LITERAL| <    (      "x"    | "X"    )    [ "0"-"9", "A"-"F", "a"-"f" ] ([ "0"-"9", "A"-"F", "a"-"f" ])? > : DOUBLE_STRING_LITERAL| < ~[ ] > : DOUBLE_STRING_LITERAL}< HEREDOC1 >SPECIAL_TOKEN :{  < HD1 : < IDENTIFIER >>  {    HereDocEnd = image.toString();  }  : HEREDOC}< HEREDOC >SPECIAL_TOKEN :{  < ~[ "\n" ] >| < "\n" > : HEREDOC2}< HEREDOC, HEREDOC2 >SPECIAL_TOKEN :{  < "\r"  | " " >}< HEREDOC2 >SPECIAL_TOKEN :{  < "\n" >| < HD2 : < IDENTIFIER >>  {    SwitchTo(HereDocEnd.equals(image.toString()) ? DEFAULT : HEREDOC);  }| < ~[ ] > : HEREDOC}< DEFAULT >TOKEN :{  < REQUIRE_ONCE : "require_once" >| < REQUIRE : "require" >| < INCLUDE_ONCE : "include_once" >| < INCLUDE : "include" >| < DEFINE : "define" >| < ECHO : "echo" >| < PRINT : "print" >| < SWITCH : "switch" >| < CASE : "case" >| < DFLT : "default" >| < BREAK : "break" >| < RETURN : "return" >| < DO : "do" >| < WHILE : "while" >| < FOREACH : "foreach" >| < AS : "as" >| < FOR : "for" >| < CONTINUE : "continue" >| < IF : "if" >| < ELSE : "else" >| < ELSEIF : "elseif" >| < AND : "and" >| < OR : "or" >| < XOR : "xor" >| < NOT : "not" >| < FUNCTION : "function" >| < CLASS : "class" >| < EXTENDS : "extends" >| < VAR : "var" >| < PUBLIC : "public" >| < PRIVATE : "private" >| < PROTECTED : "protected" >| < ABSTRACT : "abstract" >| < FINAL : "final" >| < STATIC : "static" >| < INTERFACE : "interface" >| < IMPLEMENTS : "implements" >| < CONST : "const" >| < CLONE : "clone" >| < INSTANCEOF : "instanceof" >| < GLOBAL : "global" >| < ARRAY : "array" >| < NEW : "new" >| < PREDEFINED_CONSTANT :    "null"  | "true"  | "false" >| < PHP_END : "?>" > : HTML_STATE| < DOLLAR : "$" > : VAR_NAME_STATE| < SEMICOLON : ";" >| < TRY : "try" >| < CATCH : "catch" >| < THROW : "throw" >}< VAR_NAME_STATE >TOKEN :{  < VAR_NAME :    < LETTER1 >    (      < LETTER1 >    | < DIGIT1 >    )* >  : DEFAULT| < #LETTER1 : [ "A"-"Z", "_", "a"-"z" ] >| < #DIGIT1 : [ "0"-"9" ] >| < DOLLAR1 : "$" >}< DEFAULT >TOKEN :{  < VARTYPE :    (      "boolean"    | "bool"    | "integer"    | "int"    | "float"    | "double"    | "real"    | "string"    ) >}< DEFAULT >TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "A"-"Z", "_", "a"-"z" ] >| < #DIGIT : [ "0"-"9" ] >}ASTPhpPage PhpPage() : {/*@bgen(jjtree) PhpPage */
  ASTPhpPage jjtn000 = (ASTPhpPage)ASTPhpPage.jjtCreate(this, JJTPHPPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PhpPage */
  try {
/*@egen*/  try  {    (HtmlBlock()) * (< PHP_BEGIN > (Statement()) * | < EOF >)  }  catch (ParseException e)  {    error_skipto(EOF);  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/   {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}ASTHtmlBlock HtmlBlock() :{/*@bgen(jjtree) HtmlBlock */
  ASTHtmlBlock jjtn000 = (ASTHtmlBlock)ASTHtmlBlock.jjtCreate(this, JJTHTMLBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) HtmlBlock */
 try {
/*@egen*/try{    < HTML >| < HTML_OTHER >| < PHP_EXPR > Expression() < PHP_END >}catch (ParseException e)
  {
    error_skipto(EOF);
    
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}void Statement() :{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = (ASTStatement)ASTStatement.jjtCreate(this, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Statement */
  try {
/*@egen*/  LOOKAHEAD(2)  LabeledStatement()| LOOKAHEAD(2)  ClassDeclaration()| LOOKAHEAD(2)  InterfaceDeclaration()| LOOKAHEAD(2)  ExpressionStatement()| CompoundStatement()| SelectionStatement()| IterationStatement()| JumpStatement()| IncludeStatement()| EchoStatement()| DefineStatement()| MemberDeclaration()| ThrowStatement()| TryBlock()| EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ThrowStatement() :{/*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = (ASTThrowStatement)ASTThrowStatement.jjtCreate(this, JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ThrowStatement */
  try {
/*@egen*/  < THROW > ClassInstantiation() EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TryBlock() :{/*@bgen(jjtree) TryBlock */
  ASTTryBlock jjtn000 = (ASTTryBlock)ASTTryBlock.jjtCreate(this, JJTTRYBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TryBlock */
  try {
/*@egen*/  < TRY > CompoundStatement()  (    < CATCH > "(" < IDENTIFIER > Variable() ")" CompoundStatement()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EndOfStatement() :{/*@bgen(jjtree) EndOfStatement */
  ASTEndOfStatement jjtn000 = (ASTEndOfStatement)ASTEndOfStatement.jjtCreate(this, JJTENDOFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EndOfStatement */
  try {
/*@egen*/  ";"| EmbeddedHtml()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EmbeddedHtml() :{/*@bgen(jjtree) EmbeddedHtml */
  ASTEmbeddedHtml jjtn000 = (ASTEmbeddedHtml)ASTEmbeddedHtml.jjtCreate(this, JJTEMBEDDEDHTML);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EmbeddedHtml */
  try {
/*@egen*/  < PHP_END >  (    < HTML >  | < HTML_OTHER >  )*  (    < PHP_BEGIN >  | < EOF >  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DefineStatement() :{/*@bgen(jjtree) DefineStatement */
  ASTDefineStatement jjtn000 = (ASTDefineStatement)ASTDefineStatement.jjtCreate(this, JJTDEFINESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DefineStatement */
  try {
/*@egen*/  < DEFINE > "(" String() "," Expression() ")" EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LabeledStatement() :{/*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = (ASTLabeledStatement)ASTLabeledStatement.jjtCreate(this, JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LabeledStatement */
  try {
/*@egen*/  < CASE > Expression() ":" Statement()| < DFLT > ":" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ExpressionStatement() :{/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = (ASTExpressionStatement)ASTExpressionStatement.jjtCreate(this, JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ExpressionStatement */
  try {
/*@egen*/  Expression() EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CompoundStatement() :{/*@bgen(jjtree) CompoundStatement */
  ASTCompoundStatement jjtn000 = (ASTCompoundStatement)ASTCompoundStatement.jjtCreate(this, JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CompoundStatement */
  try {
/*@egen*/  "{"  (    Statement()  )*  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectionStatement() :{/*@bgen(jjtree) SelectionStatement */
  ASTSelectionStatement jjtn000 = (ASTSelectionStatement)ASTSelectionStatement.jjtCreate(this, JJTSELECTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectionStatement */
  try {
/*@egen*/  < IF > "(" Expression() ")" Statement()  (    LOOKAHEAD(2)    < ELSEIF > "(" Expression() ")" Statement()  )*  [    LOOKAHEAD(2)    < ELSE > Statement()  ]| < SWITCH > "(" Expression() ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IterationStatement() :{/*@bgen(jjtree) IterationStatement */
  ASTIterationStatement jjtn000 = (ASTIterationStatement)ASTIterationStatement.jjtCreate(this, JJTITERATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IterationStatement */
  try {
/*@egen*/  < WHILE > "(" Expression() ")" Statement()| < DO > Statement() < WHILE > "(" Expression() ")" EndOfStatement()| < FOR > "(" [ Expression() ] ";" [ Expression() ] ";" [ Expression() ] ")" Statement()| < FOREACH > "(" [ Expression() ] < AS > Variable()  (    "=>" [ "&" ] Variable()  )?  ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void JumpStatement() :{/*@bgen(jjtree) JumpStatement */
  ASTJumpStatement jjtn000 = (ASTJumpStatement)ASTJumpStatement.jjtCreate(this, JJTJUMPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) JumpStatement */
  try {
/*@egen*/  < CONTINUE > [ < INTEGER_LITERAL > ] EndOfStatement()| < BREAK > [ < INTEGER_LITERAL > ] EndOfStatement()| < RETURN > [ Expression() ] EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ParameterList() :{/*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = (ASTParameterList)ASTParameterList.jjtCreate(this, JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ParameterList */
  try {
/*@egen*/  Parameter()  (    LOOKAHEAD(2)    "," Parameter()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Parameter() :{/*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = (ASTParameter)ASTParameter.jjtCreate(this, JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Parameter */
  try {
/*@egen*/  [ < IDENTIFIER > ] [ "&" ] Variable()  (    "=" Expression()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ClassDeclaration() :{/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = (ASTClassDeclaration)ASTClassDeclaration.jjtCreate(this, JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ClassDeclaration */
  try {
/*@egen*/  [    < ABSTRACT >  | < FINAL >  ]  < CLASS > < IDENTIFIER > [ < EXTENDS > < IDENTIFIER > ] [ < IMPLEMENTS > < IDENTIFIER > ("," < IDENTIFIER >)* ] ClassMembers()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ClassMembers() :{/*@bgen(jjtree) ClassMembers */
  ASTClassMembers jjtn000 = (ASTClassMembers)ASTClassMembers.jjtCreate(this, JJTCLASSMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ClassMembers */
  try {
/*@egen*/  "{"  (    MemberDeclaration()  )*  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MemberDeclaration() :{/*@bgen(jjtree) MemberDeclaration */
  ASTMemberDeclaration jjtn000 = (ASTMemberDeclaration)ASTMemberDeclaration.jjtCreate(this, JJTMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MemberDeclaration */
  try {
/*@egen*/  LOOKAHEAD((< FINAL >| Visibility()| < STATIC >)* < FUNCTION >)  (    < FINAL >  | Visibility()  | < STATIC >  )*  < FUNCTION > [ "&" ] < IDENTIFIER > "(" [ ParameterList() ] ")" CompoundStatement()| LOOKAHEAD([ Visibility() ] < CONST >)  [ Visibility() ] < CONST > < IDENTIFIER > "=" Expression() EndOfStatement()|  (    < VAR >  | Visibility()  | < STATIC >  )*  < DOLLAR > < VAR_NAME > [ "=" Expression() ]  (    "," < DOLLAR > < VAR_NAME > [ "=" Expression() ]  )*  EndOfStatement()| < GLOBAL > Variable()  (    "," Variable()  )*  EndOfStatement()| < ABSTRACT > [ Visibility() ] [ < STATIC > ] < FUNCTION > [ "&" ] < IDENTIFIER > "(" [ ParameterList() ] ")" EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InterfaceDeclaration() :{/*@bgen(jjtree) InterfaceDeclaration */
  ASTInterfaceDeclaration jjtn000 = (ASTInterfaceDeclaration)ASTInterfaceDeclaration.jjtCreate(this, JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InterfaceDeclaration */
  try {
/*@egen*/  < INTERFACE > < IDENTIFIER > [ < EXTENDS > < IDENTIFIER > ("," < IDENTIFIER >)* ] InterfaceMembers()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InterfaceMembers() :{/*@bgen(jjtree) InterfaceMembers */
  ASTInterfaceMembers jjtn000 = (ASTInterfaceMembers)ASTInterfaceMembers.jjtCreate(this, JJTINTERFACEMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InterfaceMembers */
  try {
/*@egen*/  "{"  (    [ < PUBLIC > ] InterfaceMember() EndOfStatement()  )*  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InterfaceMember() :{/*@bgen(jjtree) InterfaceMember */
  ASTInterfaceMember jjtn000 = (ASTInterfaceMember)ASTInterfaceMember.jjtCreate(this, JJTINTERFACEMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InterfaceMember */
  try {
/*@egen*/  [ < ABSTRACT > ] < FUNCTION > [ "&" ] < IDENTIFIER > "(" [ ParameterList() ] ")" [ "{" "}" ]| < DOLLAR > < VAR_NAME > ("," < DOLLAR > < VAR_NAME >)*| < CONST > < IDENTIFIER > "=" Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IncludeStatement() :{/*@bgen(jjtree) IncludeStatement */
  ASTIncludeStatement jjtn000 = (ASTIncludeStatement)ASTIncludeStatement.jjtCreate(this, JJTINCLUDESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IncludeStatement */
  try {
/*@egen*/  [ "@" ]  (    < INCLUDE >  | < INCLUDE_ONCE >  | < REQUIRE >  | < REQUIRE_ONCE >  )  (    LOOKAHEAD(2)    "(" Expression() ")"  | Expression()  )  EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EchoStatement() :{/*@bgen(jjtree) EchoStatement */
  ASTEchoStatement jjtn000 = (ASTEchoStatement)ASTEchoStatement.jjtCreate(this, JJTECHOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EchoStatement */
  try {
/*@egen*/  (    < ECHO >  | < PRINT >  )  ArgumentExpressionList() EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression() :{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = (ASTExpression)ASTExpression.jjtCreate(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  LogicalTextOrExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LogicalTextOrExpression() :{/*@bgen(jjtree) LogicalTextOrExpression */
  ASTLogicalTextOrExpression jjtn000 = (ASTLogicalTextOrExpression)ASTLogicalTextOrExpression.jjtCreate(this, JJTLOGICALTEXTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LogicalTextOrExpression */
  try {
/*@egen*/  LogicalTextXorExpression()  [    LOOKAHEAD(2)    < OR > LogicalTextOrExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LogicalTextXorExpression() :{/*@bgen(jjtree) LogicalTextXorExpression */
  ASTLogicalTextXorExpression jjtn000 = (ASTLogicalTextXorExpression)ASTLogicalTextXorExpression.jjtCreate(this, JJTLOGICALTEXTXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LogicalTextXorExpression */
  try {
/*@egen*/  LogicalTextAndExpression()  [    LOOKAHEAD(2)    < XOR > LogicalTextXorExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LogicalTextAndExpression() :{/*@bgen(jjtree) LogicalTextAndExpression */
  ASTLogicalTextAndExpression jjtn000 = (ASTLogicalTextAndExpression)ASTLogicalTextAndExpression.jjtCreate(this, JJTLOGICALTEXTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LogicalTextAndExpression */
  try {
/*@egen*/  AssignmentExpression()  [    LOOKAHEAD(2)    < AND > LogicalTextAndExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AssignmentExpression() :{/*@bgen(jjtree) AssignmentExpression */
  ASTAssignmentExpression jjtn000 = (ASTAssignmentExpression)ASTAssignmentExpression.jjtCreate(this, JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignmentExpression */
  try {
/*@egen*/  ConditionalExpression()  [    LOOKAHEAD(2)    AssignmentOperator() Expression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AssignmentOperator() :{/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = (ASTAssignmentOperator)ASTAssignmentOperator.jjtCreate(this, JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignmentOperator */
  try {
/*@egen*/  (    "="  | "+="  | "-="  | "*="  | "/="  | ".="  | "%="  | "&="  | "|="  | "^="  | "<<="  | ">>="  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ConditionalExpression() :{/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = (ASTConditionalExpression)ASTConditionalExpression.jjtCreate(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConditionalExpression */
  try {
/*@egen*/  Logical_Or_Expression()  [    LOOKAHEAD(2)    "?" Expression() ":" Expression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Logical_Or_Expression() :{/*@bgen(jjtree) Logical_Or_Expression */
  ASTLogical_Or_Expression jjtn000 = (ASTLogical_Or_Expression)ASTLogical_Or_Expression.jjtCreate(this, JJTLOGICAL_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Logical_Or_Expression */
  try {
/*@egen*/  Logical_And_Expression()  [    LOOKAHEAD(2)    "||" Logical_Or_Expression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Logical_And_Expression() :{/*@bgen(jjtree) Logical_And_Expression */
  ASTLogical_And_Expression jjtn000 = (ASTLogical_And_Expression)ASTLogical_And_Expression.jjtCreate(this, JJTLOGICAL_AND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Logical_And_Expression */
  try {
/*@egen*/  BitwiseOrExpression()  [    LOOKAHEAD(2)    "&&" Logical_And_Expression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BitwiseOrExpression() :{/*@bgen(jjtree) BitwiseOrExpression */
  ASTBitwiseOrExpression jjtn000 = (ASTBitwiseOrExpression)ASTBitwiseOrExpression.jjtCreate(this, JJTBITWISEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BitwiseOrExpression */
  try {
/*@egen*/  BitwiseXorExpression()  [    LOOKAHEAD(2)    "|" BitwiseOrExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BitwiseXorExpression() :{/*@bgen(jjtree) BitwiseXorExpression */
  ASTBitwiseXorExpression jjtn000 = (ASTBitwiseXorExpression)ASTBitwiseXorExpression.jjtCreate(this, JJTBITWISEXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BitwiseXorExpression */
  try {
/*@egen*/  BitwiseAndExpression()  [    LOOKAHEAD(2)    "^" BitwiseXorExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BitwiseAndExpression() :{/*@bgen(jjtree) BitwiseAndExpression */
  ASTBitwiseAndExpression jjtn000 = (ASTBitwiseAndExpression)ASTBitwiseAndExpression.jjtCreate(this, JJTBITWISEANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BitwiseAndExpression */
  try {
/*@egen*/  EqualityExpression()  [    LOOKAHEAD(2)    "&" BitwiseAndExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EqualityExpression() :{/*@bgen(jjtree) EqualityExpression */
  ASTEqualityExpression jjtn000 = (ASTEqualityExpression)ASTEqualityExpression.jjtCreate(this, JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EqualityExpression */
  try {
/*@egen*/  RelationalExpression()  [    LOOKAHEAD(2)    (      "=="    | "!="    | "==="    | "!=="    )    EqualityExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RelationalExpression() :{/*@bgen(jjtree) RelationalExpression */
  ASTRelationalExpression jjtn000 = (ASTRelationalExpression)ASTRelationalExpression.jjtCreate(this, JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RelationalExpression */
  try {
/*@egen*/  ShiftExpression()  [    LOOKAHEAD(2)    (      "<"    | ">"    | "<="    | ">="    )    RelationalExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ShiftExpression() :{/*@bgen(jjtree) ShiftExpression */
  ASTShiftExpression jjtn000 = (ASTShiftExpression)ASTShiftExpression.jjtCreate(this, JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ShiftExpression */
  try {
/*@egen*/  AdditiveExpression()  [    LOOKAHEAD(2)    (      "<<"    | ">>"    )    ShiftExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AdditiveExpression() :{/*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = (ASTAdditiveExpression)ASTAdditiveExpression.jjtCreate(this, JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/  MultiplicativeExpression()  [    LOOKAHEAD(2)    (      "+"    | "-"    | "."    )    AdditiveExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MultiplicativeExpression() :{/*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = (ASTMultiplicativeExpression)ASTMultiplicativeExpression.jjtCreate(this, JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/  CastExpression()  [    LOOKAHEAD(2)    (      "*"    | "/"    | "%"    )    MultiplicativeExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CastExpression() :{/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = (ASTCastExpression)ASTCastExpression.jjtCreate(this, JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CastExpression */
  try {
/*@egen*/  [    LOOKAHEAD("(" < VARTYPE > ")")    "(" < VARTYPE > ")"  ]  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void UnaryExpression() :{/*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression jjtn000 = (ASTUnaryExpression)ASTUnaryExpression.jjtCreate(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/  (    "&"  | "-"  | "~"  | "!"  )*  PrefixIncDecExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PrefixIncDecExpression() :{/*@bgen(jjtree) PrefixIncDecExpression */
  ASTPrefixIncDecExpression jjtn000 = (ASTPrefixIncDecExpression)ASTPrefixIncDecExpression.jjtCreate(this, JJTPREFIXINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PrefixIncDecExpression */
  try {
/*@egen*/  (    "++"  | "--"  )*  PostfixIncDecExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PostfixIncDecExpression() :{/*@bgen(jjtree) PostfixIncDecExpression */
  ASTPostfixIncDecExpression jjtn000 = (ASTPostfixIncDecExpression)ASTPostfixIncDecExpression.jjtCreate(this, JJTPOSTFIXINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PostfixIncDecExpression */
  try {
/*@egen*/  InstanceOfExpression()  (    "++"  | "--"  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InstanceOfExpression() :{/*@bgen(jjtree) InstanceOfExpression */
  ASTInstanceOfExpression jjtn000 = (ASTInstanceOfExpression)ASTInstanceOfExpression.jjtCreate(this, JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InstanceOfExpression */
  try {
/*@egen*/  PostfixExpression()  [    LOOKAHEAD(2)    < INSTANCEOF > Expression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PostfixExpression() :{/*@bgen(jjtree) PostfixExpression */
  ASTPostfixExpression jjtn000 = (ASTPostfixExpression)ASTPostfixExpression.jjtCreate(this, JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PostfixExpression */
  try {
/*@egen*/  PrimaryExpression()  (    "(" ArgumentExpressionList() ")"  | "->" PostfixExpression()  | /* TODO: There is a problem here.  Variable members
						  								can have reserved names since they are preceded
						  								by a $, but the $ is ommitted here and this
						  								parser will complain.  If you have declared:
						  									private $array
						  								you can have:
														  	$this->array
														which is fine with PHP,
														but will generate an error in this parser */"::" PostfixExpression()  | "[" [ Expression() ] "]"  | "{" Expression() "}"  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PrimaryExpression() :{/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = (ASTPrimaryExpression)ASTPrimaryExpression.jjtCreate(this, JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PrimaryExpression */
  try {
/*@egen*/  LOOKAHEAD(2)  [ "@" ] Variable()| [ "@" ] Constant()| "(" Expression() ")"| ClassInstantiation()| Array()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Array() :{/*@bgen(jjtree) Array */
  ASTArray jjtn000 = (ASTArray)ASTArray.jjtCreate(this, JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Array */
  try {
/*@egen*/  < ARRAY > "("  [    Expression() [ "=>" Expression() ]  ]  (    "," Expression() [ "=>" Expression() ]  )*  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ClassInstantiation() :{/*@bgen(jjtree) ClassInstantiation */
  ASTClassInstantiation jjtn000 = (ASTClassInstantiation)ASTClassInstantiation.jjtCreate(this, JJTCLASSINSTANTIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ClassInstantiation */
  try {
/*@egen*/  < NEW > Expression()  [    LOOKAHEAD(3)    "(" ArgumentExpressionList() ")"  ]| < CLONE > Variable()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Variable() :{/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = (ASTVariable)ASTVariable.jjtCreate(this, JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Variable */
  try {
/*@egen*/  < DOLLAR > (< DOLLAR1 >)* < VAR_NAME >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ArgumentExpressionList() :{/*@bgen(jjtree) ArgumentExpressionList */
  ASTArgumentExpressionList jjtn000 = (ASTArgumentExpressionList)ASTArgumentExpressionList.jjtCreate(this, JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ArgumentExpressionList */
  try {
/*@egen*/  [ Expression() ]  (    "," Expression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Constant() :{/*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = (ASTConstant)ASTConstant.jjtCreate(this, JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Constant */
  try {
/*@egen*/  < INTEGER_LITERAL >| < FLOATING_POINT_LITERAL >| String()| < PREDEFINED_CONSTANT >| < IDENTIFIER >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void String() :{/*@bgen(jjtree) String */
  ASTString jjtn000 = (ASTString)ASTString.jjtCreate(this, JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) String */
  try {
/*@egen*/  DoubleStringLiteral()| < SINGLE_STRING_LITERAL_START > < SINGLE_STRING_LITERAL_END >| < HEREDOC_START >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DoubleStringLiteral() :{/*@bgen(jjtree) DoubleStringLiteral */
  ASTDoubleStringLiteral jjtn000 = (ASTDoubleStringLiteral)ASTDoubleStringLiteral.jjtCreate(this, JJTDOUBLESTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DoubleStringLiteral */
  try {
/*@egen*/  < DOUBLE_STRING_LITERAL_START >  (    LOOKAHEAD(2)    < DSL_SIMPLE_VAR_START > < DSL_SIMPLE_STRING_VAR_END >  |    (      < DSL_SIMPLE_VAR_START >      (        < DSL_SIMPLE_VAR_END >      | < DSL_SIMPLE_VAR_WASNT >      )    | < DSL_COMPLEX_VAR_START > < DSL_COMPLEX_VAR_END >    )*    < DOUBLE_STRING_LITERAL_END >  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Visibility() :{/*@bgen(jjtree) Visibility */
  ASTVisibility jjtn000 = (ASTVisibility)ASTVisibility.jjtCreate(this, JJTVISIBILITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Visibility */
  try {
/*@egen*/  < PUBLIC >| < PRIVATE >| < PROTECTED >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
